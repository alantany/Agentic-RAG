"""
Oracle 23ai 融合数据库配置
统一管理向量、JSON文档和图数据
"""

import os
from typing import Dict, Any, List, Optional
import oracledb
import json

# Oracle 23ai 数据库配置
ORACLE_23AI_CONFIG = {
    "username": "AGENTIC_RAG",
    "password": "your_password_here",  # 需要用户提供
    "dsn": "localhost:1521/FREEPDB1",  # 本地Oracle 23ai Free
    # "dsn": "your_cloud_instance.oraclecloud.com:1521/your_service",  # Oracle Cloud
    "config_dir": "./oracle_config",  # Oracle客户端配置目录
    "wallet_location": "./oracle_wallet",  # 钱包位置（云端连接）
    "pool_min": 2,
    "pool_max": 10,
    "pool_increment": 1,
    "encoding": "UTF-8"
}

# 向量搜索配置
VECTOR_CONFIG = {
    "dimension": 384,  # 与sentence-transformers模型匹配
    "distance_metric": "COSINE",  # COSINE, EUCLIDEAN, DOT_PRODUCT
    "vector_index_type": "IVF",  # IVF, HNSW
    "accuracy": 95,  # 搜索精度百分比
    "neighbors": 50,  # 返回的最近邻数量
    "table_name": "MEDICAL_VECTORS",
    "embedding_column": "VECTOR_DATA",
    "metadata_column": "METADATA"
}

# JSON文档配置
JSON_CONFIG = {
    "table_name": "MEDICAL_DOCUMENTS",
    "json_column": "DOC_DATA",
    "metadata_column": "DOC_METADATA",
    "search_index": "MEDICAL_DOC_IDX",
    "enable_full_text_search": True
}

# 图数据库配置
GRAPH_CONFIG = {
    "graph_name": "MEDICAL_KNOWLEDGE_GRAPH",
    "vertex_table": "MEDICAL_VERTICES",
    "edge_table": "MEDICAL_EDGES",
    "enable_pgql": True,  # 启用PGQL查询语言
    "enable_analytics": True  # 启用图分析功能
}

class Oracle23AIManager:
    """Oracle 23ai 融合数据库管理器"""
    
    def __init__(self):
        self.connection_pool = None
        self.connection = None
        
    def initialize_connection_pool(self):
        """初始化连接池"""
        try:
            # 初始化Oracle客户端
            oracledb.init_oracle_client(
                config_dir=ORACLE_23AI_CONFIG["config_dir"]
            )
            
            # 创建连接池
            self.connection_pool = oracledb.create_pool(
                user=ORACLE_23AI_CONFIG["username"],
                password=ORACLE_23AI_CONFIG["password"],
                dsn=ORACLE_23AI_CONFIG["dsn"],
                min=ORACLE_23AI_CONFIG["pool_min"],
                max=ORACLE_23AI_CONFIG["pool_max"],
                increment=ORACLE_23AI_CONFIG["pool_increment"],
                encoding=ORACLE_23AI_CONFIG["encoding"]
            )
            
            print("✅ Oracle 23ai连接池初始化成功")
            return True
            
        except Exception as e:
            print(f"❌ Oracle 23ai连接池初始化失败: {str(e)}")
            return False
    
    def get_connection(self):
        """获取数据库连接"""
        if self.connection_pool:
            return self.connection_pool.acquire()
        return None
    
    def setup_database_schema(self):
        """设置数据库模式和表结构"""
        connection = self.get_connection()
        if not connection:
            return False
            
        try:
            cursor = connection.cursor()
            
            # 1. 创建向量表
            vector_ddl = f"""
            CREATE TABLE {VECTOR_CONFIG["table_name"]} (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                patient_name VARCHAR2(100),
                content CLOB,
                {VECTOR_CONFIG["embedding_column"]} VECTOR({VECTOR_CONFIG["dimension"]}, FLOAT32),
                {VECTOR_CONFIG["metadata_column"]} JSON,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
            
            # 2. 创建JSON文档表
            json_ddl = f"""
            CREATE TABLE {JSON_CONFIG["table_name"]} (
                id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                patient_id VARCHAR2(50),
                {JSON_CONFIG["json_column"]} JSON,
                {JSON_CONFIG["metadata_column"]} JSON,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
            
            # 3. 创建图顶点表
            vertex_ddl = f"""
            CREATE TABLE {GRAPH_CONFIG["vertex_table"]} (
                vertex_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                vertex_type VARCHAR2(50),
                vertex_label VARCHAR2(200),
                properties JSON,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            """
            
            # 4. 创建图边表
            edge_ddl = f"""
            CREATE TABLE {GRAPH_CONFIG["edge_table"]} (
                edge_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                source_vertex_id NUMBER,
                target_vertex_id NUMBER,
                edge_type VARCHAR2(50),
                edge_label VARCHAR2(200),
                properties JSON,
                created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (source_vertex_id) REFERENCES {GRAPH_CONFIG["vertex_table"]}(vertex_id),
                FOREIGN KEY (target_vertex_id) REFERENCES {GRAPH_CONFIG["vertex_table"]}(vertex_id)
            )
            """
            
            # 执行DDL语句
            ddl_statements = [
                ("向量表", vector_ddl),
                ("JSON文档表", json_ddl),
                ("图顶点表", vertex_ddl),
                ("图边表", edge_ddl)
            ]
            
            for name, ddl in ddl_statements:
                try:
                    cursor.execute(ddl)
                    print(f"✅ {name}创建成功")
                except Exception as e:
                    if "ORA-00955" in str(e):  # 表已存在
                        print(f"ℹ️ {name}已存在")
                    else:
                        print(f"❌ {name}创建失败: {str(e)}")
            
            # 5. 创建向量索引
            vector_index_ddl = f"""
            CREATE VECTOR INDEX {VECTOR_CONFIG["table_name"]}_VEC_IDX 
            ON {VECTOR_CONFIG["table_name"]} ({VECTOR_CONFIG["embedding_column"]})
            ORGANIZATION INMEMORY NEIGHBOR GRAPH
            DISTANCE {VECTOR_CONFIG["distance_metric"]}
            WITH TARGET ACCURACY {VECTOR_CONFIG["accuracy"]}
            """
            
            try:
                cursor.execute(vector_index_ddl)
                print("✅ 向量索引创建成功")
            except Exception as e:
                if "ORA-00955" in str(e):
                    print("ℹ️ 向量索引已存在")
                else:
                    print(f"❌ 向量索引创建失败: {str(e)}")
            
            # 6. 创建JSON搜索索引
            if JSON_CONFIG["enable_full_text_search"]:
                json_index_ddl = f"""
                CREATE SEARCH INDEX {JSON_CONFIG["search_index"]} 
                ON {JSON_CONFIG["table_name"]} ({JSON_CONFIG["json_column"]})
                FOR JSON
                """
                
                try:
                    cursor.execute(json_index_ddl)
                    print("✅ JSON搜索索引创建成功")
                except Exception as e:
                    if "ORA-00955" in str(e):
                        print("ℹ️ JSON搜索索引已存在")
                    else:
                        print(f"❌ JSON搜索索引创建失败: {str(e)}")
            
            connection.commit()
            return True
            
        except Exception as e:
            print(f"❌ 数据库模式设置失败: {str(e)}")
            connection.rollback()
            return False
            
        finally:
            connection.close()
    
    def test_connection(self):
        """测试数据库连接"""
        connection = self.get_connection()
        if not connection:
            return False
            
        try:
            cursor = connection.cursor()
            cursor.execute("SELECT BANNER FROM V$VERSION WHERE ROWNUM = 1")
            version = cursor.fetchone()[0]
            print(f"✅ 数据库连接成功: {version}")
            return True
            
        except Exception as e:
            print(f"❌ 数据库连接测试失败: {str(e)}")
            return False
            
        finally:
            connection.close()

# 全局管理器实例
oracle_manager = Oracle23AIManager()

def get_oracle_config():
    """获取Oracle配置"""
    return ORACLE_23AI_CONFIG

def get_vector_config():
    """获取向量配置"""
    return VECTOR_CONFIG

def get_json_config():
    """获取JSON配置"""
    return JSON_CONFIG

def get_graph_config():
    """获取图配置"""
    return GRAPH_CONFIG

def initialize_oracle_23ai():
    """初始化Oracle 23ai环境"""
    print("🚀 开始初始化Oracle 23ai融合数据库...")
    
    # 初始化连接池
    if not oracle_manager.initialize_connection_pool():
        return False
    
    # 测试连接
    if not oracle_manager.test_connection():
        return False
    
    # 设置数据库模式
    if not oracle_manager.setup_database_schema():
        return False
    
    print("✅ Oracle 23ai融合数据库初始化完成！")
    return True

if __name__ == "__main__":
    # 测试配置
    print("Oracle 23ai融合数据库配置测试")
    print("=" * 50)
    
    print("📊 配置信息:")
    print(f"  向量维度: {VECTOR_CONFIG['dimension']}")
    print(f"  距离度量: {VECTOR_CONFIG['distance_metric']}")
    print(f"  JSON表名: {JSON_CONFIG['table_name']}")
    print(f"  图名称: {GRAPH_CONFIG['graph_name']}")
    
    # 注意：实际运行需要先配置数据库连接信息
    print("\n⚠️  请在实际使用前配置数据库连接信息")
