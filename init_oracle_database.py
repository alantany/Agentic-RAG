#!/usr/bin/env python3
"""
初始化Oracle 23ai数据库表结构
"""

import oracledb
from oracle_23ai_config import ORACLE_23AI_CONFIG, VECTOR_CONFIG, JSON_CONFIG, GRAPH_CONFIG

def init_oracle_database():
    """初始化Oracle 23ai数据库"""
    print("🚀 开始初始化Oracle 23ai融合数据库...")
    print("=" * 60)
    
    try:
        # 连接数据库
        print("🔗 连接数据库...")
        connection = oracledb.connect(
            user=ORACLE_23AI_CONFIG["username"],
            password=ORACLE_23AI_CONFIG["password"],
            dsn=ORACLE_23AI_CONFIG["dsn"]
        )
        
        cursor = connection.cursor()
        print("✅ 数据库连接成功")
        
        # 1. 创建向量表
        print("\n📊 创建向量数据表...")
        vector_ddl = f"""
        CREATE TABLE {VECTOR_CONFIG["table_name"]} (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            patient_name VARCHAR2(100),
            content CLOB,
            {VECTOR_CONFIG["embedding_column"]} VECTOR({VECTOR_CONFIG["dimension"]}, FLOAT32),
            {VECTOR_CONFIG["metadata_column"]} JSON,
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """
        
        try:
            cursor.execute(vector_ddl)
            print(f"✅ {VECTOR_CONFIG['table_name']} 表创建成功")
        except Exception as e:
            if "ORA-00955" in str(e):
                print(f"ℹ️ {VECTOR_CONFIG['table_name']} 表已存在")
            else:
                print(f"❌ {VECTOR_CONFIG['table_name']} 表创建失败: {str(e)}")
        
        # 2. 创建JSON文档表
        print("\n📄 创建JSON文档表...")
        json_ddl = f"""
        CREATE TABLE {JSON_CONFIG["table_name"]} (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            patient_id VARCHAR2(50),
            {JSON_CONFIG["json_column"]} JSON,
            {JSON_CONFIG["metadata_column"]} JSON,
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """
        
        try:
            cursor.execute(json_ddl)
            print(f"✅ {JSON_CONFIG['table_name']} 表创建成功")
        except Exception as e:
            if "ORA-00955" in str(e):
                print(f"ℹ️ {JSON_CONFIG['table_name']} 表已存在")
            else:
                print(f"❌ {JSON_CONFIG['table_name']} 表创建失败: {str(e)}")
        
        # 3. 创建图顶点表
        print("\n🕸️ 创建图数据表...")
        vertex_ddl = f"""
        CREATE TABLE {GRAPH_CONFIG["vertex_table"]} (
            vertex_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            vertex_type VARCHAR2(50),
            vertex_label VARCHAR2(200),
            properties JSON,
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """
        
        try:
            cursor.execute(vertex_ddl)
            print(f"✅ {GRAPH_CONFIG['vertex_table']} 表创建成功")
        except Exception as e:
            if "ORA-00955" in str(e):
                print(f"ℹ️ {GRAPH_CONFIG['vertex_table']} 表已存在")
            else:
                print(f"❌ {GRAPH_CONFIG['vertex_table']} 表创建失败: {str(e)}")
        
        # 4. 创建图边表
        edge_ddl = f"""
        CREATE TABLE {GRAPH_CONFIG["edge_table"]} (
            edge_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            source_vertex_id NUMBER,
            target_vertex_id NUMBER,
            edge_type VARCHAR2(50),
            edge_label VARCHAR2(200),
            properties JSON,
            created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (source_vertex_id) REFERENCES {GRAPH_CONFIG["vertex_table"]}(vertex_id),
            FOREIGN KEY (target_vertex_id) REFERENCES {GRAPH_CONFIG["vertex_table"]}(vertex_id)
        )
        """
        
        try:
            cursor.execute(edge_ddl)
            print(f"✅ {GRAPH_CONFIG['edge_table']} 表创建成功")
        except Exception as e:
            if "ORA-00955" in str(e):
                print(f"ℹ️ {GRAPH_CONFIG['edge_table']} 表已存在")
            else:
                print(f"❌ {GRAPH_CONFIG['edge_table']} 表创建失败: {str(e)}")
        
        # 5. 创建向量索引
        print("\n🎯 创建向量索引...")
        vector_index_ddl = f"""
        CREATE VECTOR INDEX {VECTOR_CONFIG["table_name"]}_VEC_IDX 
        ON {VECTOR_CONFIG["table_name"]} ({VECTOR_CONFIG["embedding_column"]})
        ORGANIZATION INMEMORY NEIGHBOR GRAPH
        DISTANCE {VECTOR_CONFIG["distance_metric"]}
        WITH TARGET ACCURACY {VECTOR_CONFIG["accuracy"]}
        """
        
        try:
            cursor.execute(vector_index_ddl)
            print(f"✅ 向量索引创建成功")
        except Exception as e:
            if "ORA-00955" in str(e) or "already exists" in str(e).lower():
                print(f"ℹ️ 向量索引已存在")
            else:
                print(f"⚠️ 向量索引创建失败: {str(e)}")
                print("💡 向量索引可能需要特殊权限或配置")
        
        # 6. 创建JSON搜索索引（如果启用）
        if JSON_CONFIG.get("enable_full_text_search", False):
            print("\n🔍 创建JSON搜索索引...")
            json_index_ddl = f"""
            CREATE SEARCH INDEX {JSON_CONFIG["search_index"]} 
            ON {JSON_CONFIG["table_name"]} ({JSON_CONFIG["json_column"]})
            FOR JSON
            """
            
            try:
                cursor.execute(json_index_ddl)
                print(f"✅ JSON搜索索引创建成功")
            except Exception as e:
                if "ORA-00955" in str(e) or "already exists" in str(e).lower():
                    print(f"ℹ️ JSON搜索索引已存在")
                else:
                    print(f"⚠️ JSON搜索索引创建失败: {str(e)}")
                    print("💡 JSON搜索索引可能需要Oracle Text组件")
        
        # 提交事务
        connection.commit()
        
        # 7. 验证表结构
        print("\n📋 验证表结构...")
        cursor.execute("SELECT table_name FROM user_tables ORDER BY table_name")
        tables = cursor.fetchall()
        
        print("已创建的表:")
        for table in tables:
            print(f"  - {table[0]}")
        
        # 8. 测试基本功能
        print("\n🧪 测试基本功能...")
        
        # 测试向量插入
        try:
            test_vector = [0.1, 0.2, 0.3] + [0.0] * 381  # 384维向量
            cursor.execute(f"""
                INSERT INTO {VECTOR_CONFIG["table_name"]} 
                (patient_name, content, {VECTOR_CONFIG["embedding_column"]}, {VECTOR_CONFIG["metadata_column"]})
                VALUES ('测试患者', '测试内容', VECTOR(:1, 384, FLOAT32), JSON('{{"test": true}}'))
            """, [test_vector])
            
            print("  ✅ 向量数据插入测试成功")
            
            # 测试向量查询
            cursor.execute(f"""
                SELECT patient_name, 
                       VECTOR_DISTANCE({VECTOR_CONFIG["embedding_column"]}, VECTOR(:1, 384, FLOAT32), COSINE) as distance
                FROM {VECTOR_CONFIG["table_name"]}
                WHERE patient_name = '测试患者'
            """, [test_vector])
            
            result = cursor.fetchone()
            if result:
                print(f"  ✅ 向量相似度查询测试成功，距离: {result[1]:.6f}")
            
        except Exception as e:
            print(f"  ⚠️ 向量功能测试失败: {str(e)}")
        
        # 测试JSON插入
        try:
            cursor.execute(f"""
                INSERT INTO {JSON_CONFIG["table_name"]} 
                (patient_id, {JSON_CONFIG["json_column"]}, {JSON_CONFIG["metadata_column"]})
                VALUES ('TEST001', JSON('{{"name": "测试患者", "age": 30}}'), JSON('{{"source": "test"}}'))
            """)
            
            print("  ✅ JSON数据插入测试成功")
            
            # 测试JSON查询
            cursor.execute(f"""
                SELECT patient_id, JSON_VALUE({JSON_CONFIG["json_column"]}, '$.name') as name
                FROM {JSON_CONFIG["table_name"]}
                WHERE patient_id = 'TEST001'
            """)
            
            result = cursor.fetchone()
            if result:
                print(f"  ✅ JSON查询测试成功，患者名: {result[1]}")
            
        except Exception as e:
            print(f"  ⚠️ JSON功能测试失败: {str(e)}")
        
        # 测试图数据插入
        try:
            # 插入顶点
            cursor.execute(f"""
                INSERT INTO {GRAPH_CONFIG["vertex_table"]} 
                (vertex_type, vertex_label, properties)
                VALUES ('patient', '测试患者', JSON('{{"name": "测试患者"}}'))
                RETURNING vertex_id INTO :vertex_id
            """, vertex_id_var := cursor.var(int))
            
            vertex_id = vertex_id_var.getvalue()[0]
            print(f"  ✅ 图顶点插入测试成功，顶点ID: {vertex_id}")
            
        except Exception as e:
            print(f"  ⚠️ 图数据功能测试失败: {str(e)}")
        
        # 清理测试数据
        print("\n🧹 清理测试数据...")
        try:
            cursor.execute(f"DELETE FROM {VECTOR_CONFIG['table_name']} WHERE patient_name = '测试患者'")
            cursor.execute(f"DELETE FROM {JSON_CONFIG['table_name']} WHERE patient_id = 'TEST001'")
            cursor.execute(f"DELETE FROM {GRAPH_CONFIG['vertex_table']} WHERE vertex_label = '测试患者'")
            connection.commit()
            print("  ✅ 测试数据清理完成")
        except Exception as e:
            print(f"  ⚠️ 测试数据清理失败: {str(e)}")
        
        cursor.close()
        connection.close()
        
        print("\n🎉 Oracle 23ai融合数据库初始化完成！")
        print("\n🎯 下一步:")
        print("  1. 启动应用: streamlit run oracle_agentic_rag_demo.py")
        print("  2. 上传PDF文档进行测试")
        print("  3. 体验统一的向量、JSON、图数据库功能")
        
        return True
        
    except Exception as e:
        print(f"❌ 数据库初始化失败: {str(e)}")
        return False

if __name__ == "__main__":
    success = init_oracle_database()
    if success:
        print("\n✅ 初始化成功！可以开始使用Oracle 23ai Agentic RAG系统")
    else:
        print("\n❌ 初始化失败，请检查错误信息")
